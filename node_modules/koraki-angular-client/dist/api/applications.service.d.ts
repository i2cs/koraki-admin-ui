import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { ApplicationCreateDataModel } from '../model/applicationCreateDataModel';
import { ApplicationViewDataModel } from '../model/applicationViewDataModel';
import { PageResultApplicationViewDataModel } from '../model/pageResultApplicationViewDataModel';
import { Configuration } from '../configuration';
export declare class ApplicationsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private canConsumeForm(consumes);
    createApplication(applicationModel?: ApplicationCreateDataModel, observe?: 'body', reportProgress?: boolean): Observable<ApplicationViewDataModel>;
    createApplication(applicationModel?: ApplicationCreateDataModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationViewDataModel>>;
    createApplication(applicationModel?: ApplicationCreateDataModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationViewDataModel>>;
    deleteApplication(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteApplication(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteApplication(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    getAllApplications(status?: string, pageSize?: number, pageNumber?: number, observe?: 'body', reportProgress?: boolean): Observable<PageResultApplicationViewDataModel>;
    getAllApplications(status?: string, pageSize?: number, pageNumber?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageResultApplicationViewDataModel>>;
    getAllApplications(status?: string, pageSize?: number, pageNumber?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageResultApplicationViewDataModel>>;
    getApplicationById(id: number, observe?: 'body', reportProgress?: boolean): Observable<ApplicationViewDataModel>;
    getApplicationById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationViewDataModel>>;
    getApplicationById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationViewDataModel>>;
    updateApplication(id: number, applicationModel?: ApplicationCreateDataModel, observe?: 'body', reportProgress?: boolean): Observable<ApplicationViewDataModel>;
    updateApplication(id: number, applicationModel?: ApplicationCreateDataModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApplicationViewDataModel>>;
    updateApplication(id: number, applicationModel?: ApplicationCreateDataModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApplicationViewDataModel>>;
}
