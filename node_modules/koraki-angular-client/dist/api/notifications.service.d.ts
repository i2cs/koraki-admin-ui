import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { NotificationCreateDataModel } from '../model/notificationCreateDataModel';
import { NotificationViewDataModel } from '../model/notificationViewDataModel';
import { PageResultNotificationViewDataModel } from '../model/pageResultNotificationViewDataModel';
import { Configuration } from '../configuration';
export declare class NotificationsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private canConsumeForm(consumes);
    createNotification(notificationModel?: NotificationCreateDataModel, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<NotificationViewDataModel>;
    createNotification(notificationModel?: NotificationCreateDataModel, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NotificationViewDataModel>>;
    createNotification(notificationModel?: NotificationCreateDataModel, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NotificationViewDataModel>>;
    deleteNotification(id: number, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteNotification(id: number, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteNotification(id: number, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    getAllNotifications(statuses?: Array<string>, pageSize?: number, pageNumber?: number, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<PageResultNotificationViewDataModel>;
    getAllNotifications(statuses?: Array<string>, pageSize?: number, pageNumber?: number, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageResultNotificationViewDataModel>>;
    getAllNotifications(statuses?: Array<string>, pageSize?: number, pageNumber?: number, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageResultNotificationViewDataModel>>;
    getAllNotificationsByKey(key?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<NotificationViewDataModel>>;
    getAllNotificationsByKey(key?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NotificationViewDataModel>>>;
    getAllNotificationsByKey(key?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NotificationViewDataModel>>>;
    getNotificationById(id: number, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<NotificationViewDataModel>;
    getNotificationById(id: number, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NotificationViewDataModel>>;
    getNotificationById(id: number, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NotificationViewDataModel>>;
    updateNotification(id: number, notificationModel?: NotificationCreateDataModel, applicationId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    updateNotification(id: number, notificationModel?: NotificationCreateDataModel, applicationId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    updateNotification(id: number, notificationModel?: NotificationCreateDataModel, applicationId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
}
